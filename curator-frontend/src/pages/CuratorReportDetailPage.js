// –ü–æ–ª–Ω—ã–π –ø—É—Ç—å: src/pages/CuratorReportDetailPage.js
import React, { useState, useEffect, useCallback } from 'react';
import { useParams, Link as RouterLink, useNavigate } from 'react-router-dom';
import {
    Container, Typography, Box, Paper, Grid, CircularProgress, Alert, Button, Divider, Chip,
    List, ListItem, ListItemText, ListItemIcon, Tooltip, IconButton
} from '@mui/material';
// –ò–∫–æ–Ω–∫–∏
import DeleteIcon from '@mui/icons-material/Delete';
import EventIcon from '@mui/icons-material/Event'; // –î–∞—Ç–∞ —Å–æ–±—ã—Ç–∏—è/–æ—Ç—á–µ—Ç–∞
import LocationOnIcon from '@mui/icons-material/LocationOn'; // –ú–µ—Å—Ç–æ
import PersonIcon from '@mui/icons-material/Person'; // –ö—É—Ä–∞—Ç–æ—Ä / –°—Ç—É–¥–µ–Ω—Ç
import GroupIcon from '@mui/icons-material/Group'; // –ì—Ä—É–ø–ø–∞ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤
import InfoIcon from '@mui/icons-material/Info'; // –û–±—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
import LinkIcon from '@mui/icons-material/Link'; // –°—Å—ã–ª–∫–∏
import AccessTimeIcon from '@mui/icons-material/AccessTime'; // –ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
import PeopleOutlineIcon from '@mui/icons-material/PeopleOutline'; // –ü—Ä–∏–≥–ª–∞—à–µ–Ω–Ω—ã–µ –≥–æ—Å—Ç–∏
import FlagIcon from '@mui/icons-material/Flag'; // –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
import LanguageIcon from '@mui/icons-material/Language'; // –ò–Ω–æ—Å—Ç—Ä–∞–Ω—Ü—ã
import ChildCareIcon from '@mui/icons-material/ChildCare'; // –ù–µ—Å–æ–≤–µ—Ä—à–µ–Ω–Ω–æ–ª–µ—Ç–Ω–∏–µ
import ArticleIcon from '@mui/icons-material/Article'; // –°–≤—è–∑–∞–Ω–Ω–æ–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ
import CalendarMonthIcon from '@mui/icons-material/CalendarMonth'; // –î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è
import PublicIcon from '@mui/icons-material/Public';
import CategoryIcon from '@mui/icons-material/Category';
// –ö–æ–Ω—Ç–µ–∫—Å—Ç, API, –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
import { useAuth } from '../contexts/AuthContext';
import { getCuratorReportById, deleteCuratorReport } from '../api/curatorReports';
import ConfirmationDialog from '../components/ConfirmationDialog';
// –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞—Ç—ã
import { format } from 'date-fns';
import { ru } from 'date-fns/locale';

const InfoItem = ({ icon, label, value, chip = false }) => (
    <Grid item xs={12} sm={6}>
        <Box sx={{ display: 'flex', alignItems: 'center', mb: 2 }}>
            <Box sx={{ mr: 1.5, color: 'text.secondary' }}>{icon}</Box>
            <Box>
                <Typography variant="caption" color="text.secondary">{label}</Typography>
                <Typography variant="body1" sx={{ fontWeight: 'medium' }}>
                    {chip ? <Chip label={value || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'} size="small"/> : (value || '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}
                </Typography>
            </Box>
        </Box>
    </Grid>
);

function CuratorReportDetailPage() {
    const { id } = useParams();
    const { user } = useAuth();
    const [report, setReport] = useState(null);
    const [loading, setLoading] = useState(true);
    const [error, setError] = useState('');

    const fetchReport = useCallback(async () => {
        try {
            const data = await getCuratorReportById(id);
            setReport(data);
        } catch (err) {
            setError(err.response?.data?.message || '–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ—Ç—á–µ—Ç–∞.');
        } finally {
            setLoading(false);
        }
    }, [id]);

    useEffect(() => {
        fetchReport();
    }, [fetchReport]);

    if (loading) {
        return <Box sx={{ display: 'flex', justifyContent: 'center', mt: 4 }}><CircularProgress /></Box>;
    }

    if (error) {
        return <Container sx={{ mt: 4 }}><Alert severity="error">{error}</Alert></Container>;
    }

    if (!report) {
        return <Container sx={{ mt: 4 }}><Alert severity="info">–û—Ç—á–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.</Alert></Container>;
    }
    
    const displayData = {
        title: report.RelatedEvent?.title ?? report.reportTitle,
        location: report.RelatedEvent?.locationText ?? report.locationText,
        direction: report.RelatedEvent?.Direction?.name ?? report.directionText,
        foreignerCount: report.RelatedEvent?.foreignerCount ?? report.foreignerCount,
        minorCount: report.RelatedEvent?.minorCount ?? report.minorCount,
        reportDate: report.reportDate,
        durationMinutes: report.durationMinutes,
        invitedGuestsInfo: report.invitedGuestsInfo,
        mediaReferences: report.mediaReferences,
        participants: report.ParticipantStudents || [],
        curatorName: report.Curator?.fullName || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'
    };


    return (
        <Container maxWidth="lg" sx={{ mt: 4, mb: 4 }}>
            <Paper sx={{ p: 3 }}>
                <Typography variant="h4" component="h1" gutterBottom>
                    {displayData.title}
                </Typography>
                <Typography variant="subtitle1" color="text.secondary" sx={{ mb: 2 }}>
                    –û—Ç—á–µ—Ç –∫—É—Ä–∞—Ç–æ—Ä–∞: {displayData.curatorName}
                </Typography>
                <Divider sx={{ mb: 3 }} />

                <Grid container spacing={2}>
                    <InfoItem 
                        icon={<EventIcon />} 
                        label="–î–∞—Ç–∞ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è" 
                        value={displayData.reportDate ? format(new Date(displayData.reportDate), 'dd MMMMíêù', { locale: ru }) : '–ù–µ —É–∫–∞–∑–∞–Ω–∞'} 
                    />
                    <InfoItem 
                        icon={<LocationOnIcon />} 
                        label="–ú–µ—Å—Ç–æ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è" 
                        value={displayData.location} 
                    />
                    <InfoItem 
                        icon={<CategoryIcon />} 
                        label="–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã" 
                        value={displayData.direction}
                        chip={true}
                    />
                    <InfoItem 
                        icon={<AccessTimeIcon />} 
                        label="–ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å (–º–∏–Ω—É—Ç)" 
                        value={displayData.durationMinutes} 
                    />
                     <InfoItem 
                        icon={<PublicIcon />} 
                        label="–ö–æ–ª-–≤–æ –∏–Ω–æ—Å—Ç—Ä–∞–Ω–Ω—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤" 
                        value={displayData.foreignerCount ?? 0} 
                    />
                    <InfoItem 
                        icon={<ChildCareIcon />} 
                        label="–ö–æ–ª-–≤–æ –Ω–µ—Å–æ–≤–µ—Ä—à–µ–Ω–Ω–æ–ª–µ—Ç–Ω–∏—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤" 
                        value={displayData.minorCount ?? 0} 
                    />
                </Grid>

                <Divider sx={{ my: 3 }} />
                
                <Grid container spacing={4}>
                    <Grid item xs={12} md={6}>
                        <Typography variant="h6" gutterBottom>–£—á–∞—Å—Ç–Ω–∏–∫–∏ ({displayData.participants.length})</Typography>
                        {displayData.participants.length > 0 ? (
                            <Paper variant="outlined" sx={{ maxHeight: 300, overflow: 'auto' }}>
                                <List dense>
                                    {displayData.participants.map(student => (
                                        <ListItem key={student.studentId}>
                                            <ListItemIcon>
                                                <PersonIcon fontSize="small" />
                                            </ListItemIcon>
                                            {/* –ò–°–ü–†–ê–í–õ–ï–ù–û: –ò—Å–ø–æ–ª—å–∑—É–µ–º 'fullName' */}
                                            <ListItemText 
                                                primary={student.fullName}
                                                secondary={student.email}
                                            />
                                        </ListItem>
                                    ))}
                                </List>
                            </Paper>
                        ) : (
                            <Typography variant="body2" color="text.secondary">–°–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –Ω–µ —É–∫–∞–∑–∞–Ω.</Typography>
                        )}
                    </Grid>
                    <Grid item xs={12} md={6}>
                        <Box>
                            <Typography variant="h6" gutterBottom>–ü—Ä–∏–≥–ª–∞—à–µ–Ω–Ω—ã–µ –≥–æ—Å—Ç–∏</Typography>
                            <Typography variant="body2" color="text.secondary" sx={{ whiteSpace: 'pre-wrap' }}>
                                {displayData.invitedGuestsInfo || '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç.'}
                            </Typography>
                        </Box>
                        <Box sx={{ mt: 3 }}>
                            <Typography variant="h6" gutterBottom>–°—Å—ã–ª–∫–∏ –Ω–∞ –º–µ–¥–∏–∞</Typography>
                            <Typography variant="body2" color="text.secondary" sx={{ whiteSpace: 'pre-wrap', wordBreak: 'break-all' }}>
                                {displayData.mediaReferences || '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç.'}
                            </Typography>
                        </Box>
                    </Grid>
                </Grid>
            </Paper>
        </Container>
    );
}

export default CuratorReportDetailPage;